package dynobjx.com.jrs.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import dynobjx.com.jrs.dao.BranchDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BRANCH_DETAIL.
*/
public class BranchDetailDao extends AbstractDao<BranchDetail, Long> {

    public static final String TABLENAME = "BRANCH_DETAIL";

    /**
     * Properties of entity BranchDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DetailId = new Property(1, Integer.class, "detailId", false, "DETAIL_ID");
        public final static Property FullAddress = new Property(2, String.class, "fullAddress", false, "FULL_ADDRESS");
        public final static Property ContactNumbers = new Property(3, String.class, "contactNumbers", false, "CONTACT_NUMBERS");
        public final static Property Managers = new Property(4, String.class, "managers", false, "MANAGERS");
        public final static Property Image = new Property(5, String.class, "image", false, "IMAGE");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property BranchId = new Property(7, Integer.class, "branchId", false, "BRANCH_ID");
    };


    public BranchDetailDao(DaoConfig config) {
        super(config);
    }
    
    public BranchDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BRANCH_DETAIL' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DETAIL_ID' INTEGER," + // 1: detailId
                "'FULL_ADDRESS' TEXT," + // 2: fullAddress
                "'CONTACT_NUMBERS' TEXT," + // 3: contactNumbers
                "'MANAGERS' TEXT," + // 4: managers
                "'IMAGE' TEXT," + // 5: image
                "'EMAIL' TEXT," + // 6: email
                "'BRANCH_ID' INTEGER);"); // 7: branchId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BRANCH_DETAIL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BranchDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer detailId = entity.getDetailId();
        if (detailId != null) {
            stmt.bindLong(2, detailId);
        }
 
        String fullAddress = entity.getFullAddress();
        if (fullAddress != null) {
            stmt.bindString(3, fullAddress);
        }
 
        String contactNumbers = entity.getContactNumbers();
        if (contactNumbers != null) {
            stmt.bindString(4, contactNumbers);
        }
 
        String managers = entity.getManagers();
        if (managers != null) {
            stmt.bindString(5, managers);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(6, image);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        Integer branchId = entity.getBranchId();
        if (branchId != null) {
            stmt.bindLong(8, branchId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BranchDetail readEntity(Cursor cursor, int offset) {
        BranchDetail entity = new BranchDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // detailId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fullAddress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contactNumbers
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // managers
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // image
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // branchId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BranchDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDetailId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setFullAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContactNumbers(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setManagers(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBranchId(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BranchDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BranchDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
