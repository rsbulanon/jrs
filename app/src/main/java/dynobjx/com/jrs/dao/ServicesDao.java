package dynobjx.com.jrs.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import dynobjx.com.jrs.dao.Services;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SERVICES.
*/
public class ServicesDao extends AbstractDao<Services, Long> {

    public static final String TABLENAME = "SERVICES";

    /**
     * Properties of entity Services.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServiceId = new Property(1, Integer.class, "serviceId", false, "SERVICE_ID");
        public final static Property ServiceName = new Property(2, String.class, "serviceName", false, "SERVICE_NAME");
        public final static Property Remarks = new Property(3, String.class, "remarks", false, "REMARKS");
        public final static Property MetricSystem = new Property(4, String.class, "metricSystem", false, "METRIC_SYSTEM");
        public final static Property ImageFile = new Property(5, String.class, "imageFile", false, "IMAGE_FILE");
    };


    public ServicesDao(DaoConfig config) {
        super(config);
    }
    
    public ServicesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SERVICES' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SERVICE_ID' INTEGER," + // 1: serviceId
                "'SERVICE_NAME' TEXT," + // 2: serviceName
                "'REMARKS' TEXT," + // 3: remarks
                "'METRIC_SYSTEM' TEXT," + // 4: metricSystem
                "'IMAGE_FILE' TEXT);"); // 5: imageFile
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SERVICES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Services entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer serviceId = entity.getServiceId();
        if (serviceId != null) {
            stmt.bindLong(2, serviceId);
        }
 
        String serviceName = entity.getServiceName();
        if (serviceName != null) {
            stmt.bindString(3, serviceName);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(4, remarks);
        }
 
        String metricSystem = entity.getMetricSystem();
        if (metricSystem != null) {
            stmt.bindString(5, metricSystem);
        }
 
        String imageFile = entity.getImageFile();
        if (imageFile != null) {
            stmt.bindString(6, imageFile);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Services readEntity(Cursor cursor, int offset) {
        Services entity = new Services( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // serviceId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // serviceName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remarks
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // metricSystem
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // imageFile
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Services entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServiceId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setServiceName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRemarks(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMetricSystem(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImageFile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Services entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Services entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
