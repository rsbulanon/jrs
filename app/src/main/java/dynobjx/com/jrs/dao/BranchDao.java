package dynobjx.com.jrs.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import dynobjx.com.jrs.dao.Branch;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BRANCH.
*/
public class BranchDao extends AbstractDao<Branch, Long> {

    public static final String TABLENAME = "BRANCH";

    /**
     * Properties of entity Branch.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BranchId = new Property(1, Integer.class, "branchId", false, "BRANCH_ID");
        public final static Property BranchName = new Property(2, String.class, "branchName", false, "BRANCH_NAME");
        public final static Property BranchAddress = new Property(3, String.class, "branchAddress", false, "BRANCH_ADDRESS");
        public final static Property ContactPerson = new Property(4, String.class, "contactPerson", false, "CONTACT_PERSON");
        public final static Property ContactNumbers = new Property(5, String.class, "contactNumbers", false, "CONTACT_NUMBERS");
        public final static Property Longitude = new Property(6, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(7, Double.class, "latitude", false, "LATITUDE");
    };


    public BranchDao(DaoConfig config) {
        super(config);
    }
    
    public BranchDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BRANCH' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BRANCH_ID' INTEGER," + // 1: branchId
                "'BRANCH_NAME' TEXT," + // 2: branchName
                "'BRANCH_ADDRESS' TEXT," + // 3: branchAddress
                "'CONTACT_PERSON' TEXT," + // 4: contactPerson
                "'CONTACT_NUMBERS' TEXT," + // 5: contactNumbers
                "'LONGITUDE' REAL," + // 6: longitude
                "'LATITUDE' REAL);"); // 7: latitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BRANCH'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Branch entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer branchId = entity.getBranchId();
        if (branchId != null) {
            stmt.bindLong(2, branchId);
        }
 
        String branchName = entity.getBranchName();
        if (branchName != null) {
            stmt.bindString(3, branchName);
        }
 
        String branchAddress = entity.getBranchAddress();
        if (branchAddress != null) {
            stmt.bindString(4, branchAddress);
        }
 
        String contactPerson = entity.getContactPerson();
        if (contactPerson != null) {
            stmt.bindString(5, contactPerson);
        }
 
        String contactNumbers = entity.getContactNumbers();
        if (contactNumbers != null) {
            stmt.bindString(6, contactNumbers);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(7, longitude);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(8, latitude);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Branch readEntity(Cursor cursor, int offset) {
        Branch entity = new Branch( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // branchId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // branchName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // branchAddress
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // contactPerson
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // contactNumbers
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // longitude
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7) // latitude
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Branch entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBranchId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setBranchName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBranchAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContactPerson(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContactNumbers(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLongitude(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setLatitude(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Branch entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Branch entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
